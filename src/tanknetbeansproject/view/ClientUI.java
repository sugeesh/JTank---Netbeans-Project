/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tanknetbeansproject.view;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import tanknetbeansproject.GUIController.KeyController;
import tanknetbeansproject.Model.BrickCell;
import tanknetbeansproject.Model.Cell;
import tanknetbeansproject.Model.Map;
import tanknetbeansproject.Model.Player;
import tanknetbeansproject.Model.Tank;
import tanknetbeansproject.ai.WaveFront;
import tanknetbeansproject.clientConnection.ServerConnector;

/**
 *
 * @author Neo_
 */
public class ClientUI extends javax.swing.JFrame {

    JLabel[][] labels = new JLabel[10][10];
    Player player = null;
    Cell map[][] = null;
    ServerConnector serverConnector = new ServerConnector();

    /**
     * Creates new form Frame
     */
    public ClientUI() {
        initComponents();
        mapPanel.setLayout(new GridLayout(10, 10));
        mapPanel.requestFocus();

        mapPanel.addKeyListener(new KeyController(serverConnector));

        //setExtendedState( getExtendedState()|JFrame.MAXIMIZED_BOTH );
        getContentPane().setBackground(Color.WHITE);

        mapPanel.setBackground(Color.WHITE);
        pointPanel.setBackground(Color.WHITE);
        messagePanel.setBackground(Color.WHITE);

        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel = new javax.swing.JPanel();
        pointPanel = new javax.swing.JPanel();
        pointLabel = new javax.swing.JLabel();
        coinLabel = new javax.swing.JLabel();
        healthLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        messagePanel = new javax.swing.JPanel();
        messageText = new javax.swing.JLabel();
        autoPlayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JTanks");
        setResizable(false);

        mapPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 688, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pointPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Point Table"));

        pointLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pointLabel.setForeground(new java.awt.Color(51, 0, 255));

        coinLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        coinLabel.setForeground(new java.awt.Color(204, 204, 0));

        healthLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        healthLabel.setForeground(new java.awt.Color(255, 0, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Health");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 0));
        jLabel2.setText("Coin");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 255));
        jLabel3.setText("Point");

        javax.swing.GroupLayout pointPanelLayout = new javax.swing.GroupLayout(pointPanel);
        pointPanel.setLayout(pointPanelLayout);
        pointPanelLayout.setHorizontalGroup(
            pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pointPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(healthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                    .addGroup(pointPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pointLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pointPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pointPanelLayout.setVerticalGroup(
            pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pointLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(coinLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(pointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(healthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        messagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Messages"));

        messageText.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        messageText.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout messagePanelLayout = new javax.swing.GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(messageText, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        autoPlayButton.setText("Auto Play");
        autoPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPlayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pointPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoPlayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(autoPlayButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(pointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPlayButtonActionPerformed
        for(int i=0;i<10;i++){
            for(int j=0;j<10;j++){
                if(map[i][j].toString().charAt(0) == 'C'){
                    autoRun(j,i);
                }
            }
        }
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_autoPlayButtonActionPerformed

    public void updateInterface(Map mapObj) {
        map = mapObj.getFullMap();

        for (int j = 0; j < map.length; j++) {
            for (int i = 0; i < map[j].length; i++) {

                if (map[i][j].getCoin() == null) {
                    labels[i][j].setText(null);
                }

                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images/normal.png"));
                if (map[i][j].equals("W")) {
                    imageIcon = new ImageIcon(getClass().getResource("/images/water.png"));
                } else if (map[i][j].equals("T")) {
                    if (((Tank) map[i][j]).getPlayer().getDirection() == 0) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/tankN.png"));
                    } else if (((Tank) map[i][j]).getPlayer().getDirection() == 1) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/tankE.png"));
                    } else if (((Tank) map[i][j]).getPlayer().getDirection() == 2) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/tankS.png"));
                    } else {
                        imageIcon = new ImageIcon(getClass().getResource("/images/tankW.png"));
                    }
                } else if (map[i][j].equals("S")) {
                    imageIcon = new ImageIcon(getClass().getResource("/images/steelwall.png"));
                } else if (map[i][j].toString().charAt(0) == 'B') {
                    if (((BrickCell) map[i][j]).getDamageLevel() == 0) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/brick0.png"));
                    } else if (((BrickCell) map[i][j]).getDamageLevel() == 1) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/brick1.png"));
                    } else if (((BrickCell) map[i][j]).getDamageLevel() == 2) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/brick2.png"));
                    } else if (((BrickCell) map[i][j]).getDamageLevel() == 3) {
                        imageIcon = new ImageIcon(getClass().getResource("/images/brick3.png"));
                    }
                } else if (map[i][j].toString().charAt(0) == 'C') {
                    imageIcon = new ImageIcon(getClass().getResource("/images/coin.png"));
                    labels[i][j].setText(map[i][j].getCoin() + " $");
                } else if (map[i][j].toString().charAt(0) == 'L') {
                    imageIcon = new ImageIcon(getClass().getResource("/images/lifepack.png"));
                }

                labels[i][j].setIcon(imageIcon);
            }
        }
    }

    public void updateHelthCoinPoint(String coin, String health, String point, String direction) {
        // TODO Auto-generated method stub
        pointLabel.setText(point);
        healthLabel.setText(health);
        coinLabel.setText(coin);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoPlayButton;
    private javax.swing.JLabel coinLabel;
    private javax.swing.JLabel healthLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JLabel messageText;
    private javax.swing.JLabel pointLabel;
    private javax.swing.JPanel pointPanel;
    // End of variables declaration//GEN-END:variables

    private synchronized void autoRun(int xValue,int yValue) {

        new Thread() {
            public  void shoot(int x, int y) {
                try {
                    if (map[x][y].toString().charAt(0) == 'B') {
                        serverConnector.sendMessage("SHOOT#");
                        Thread.sleep(2000);
                        serverConnector.sendMessage("SHOOT#");
                        Thread.sleep(2000);
                        serverConnector.sendMessage("SHOOT#");
                        Thread.sleep(2000);
                        serverConnector.sendMessage("SHOOT#");
                        Thread.sleep(2000);
                    }
                } catch (Exception ex) {
                }
            }

            public void run() {
                WaveFront waveFront = new WaveFront();
                waveFront.reviewMap(map);
                char dire = 'N';
                if (player.getDirection() == 1) {
                    dire = 'E';
                } else if (player.getDirection() == 2) {
                    dire = 'S';
                } else if (player.getDirection() == 3) {
                    dire = 'W';
                }
                char newHeadDir[] = waveFront.waveFront(xValue, yValue, player.getyValue(), player.getxValue(), dire);
                ArrayList<Character> generatedMap = new ArrayList();

                try {

                    for (int i = 0; i < 1000; i++) {
                        switch (newHeadDir[i]) {
                            case 'N':
                                if (player.getDirection() == 2) {
                                    shoot(player.getxValue(), player.getyValue() + 1);
                                    serverConnector.sendMessage("DOWN#");
                                    Thread.sleep(2000);

                                } else {
                                    serverConnector.sendMessage("DOWN#");
                                    Thread.sleep(2000);
                                    shoot(player.getxValue(), player.getyValue() + 1);
                                    serverConnector.sendMessage("DOWN#");
                                    Thread.sleep(2000);
                                }
                                break;

                            case 'S':
                                if (player.getDirection() == 0) {
                                    shoot(player.getxValue(), player.getyValue() - 1);
                                    serverConnector.sendMessage("UP#");
                                    Thread.sleep(2000);
                                } else {
                                    serverConnector.sendMessage("UP#");
                                    Thread.sleep(2000);
                                    shoot(player.getxValue(), player.getyValue() - 1);
                                    serverConnector.sendMessage("UP#");
                                    Thread.sleep(2000);
                                }
                                break;

                            case 'E':
                                if (player.getDirection() == 1) {
                                    shoot(player.getxValue() + 1, player.getyValue());
                                    serverConnector.sendMessage("RIGHT#");
                                    Thread.sleep(2000);
                                } else {
                                    serverConnector.sendMessage("RIGHT#");
                                    Thread.sleep(2000);
                                    shoot(player.getxValue() + 1, player.getyValue());
                                    serverConnector.sendMessage("RIGHT#");
                                    Thread.sleep(2000);
                                }
                                break;

                            case 'W':
                                if (player.getDirection() == 3) {
                                    shoot(player.getxValue() - 1, player.getyValue());
                                    serverConnector.sendMessage("LEFT#");
                                    Thread.sleep(2000);
                                } else {
                                    serverConnector.sendMessage("LEFT#");
                                    Thread.sleep(2000);
                                    shoot(player.getxValue() - 1, player.getyValue());
                                    serverConnector.sendMessage("LEFT#");
                                    Thread.sleep(2000);
                                }
                                break;

                        }
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    public void drawMap(Map mapObj) {
        Cell map[][] = mapObj.getFullMap();

        for (int j = 0; j < map.length; j++) {
            for (int i = 0; i < map[j].length; i++) {
                labels[i][j] = new JLabel();
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images/normal.png"));
                if (map[i][j].equals("W")) {
                    imageIcon = new ImageIcon(getClass().getResource("/images/water.png"));
                } else if (map[i][j].equals("T")) {
                    imageIcon = new ImageIcon(getClass().getResource("/images/tankN.png"));
                } else if (map[i][j].equals("S")) {
                    imageIcon = new ImageIcon(getClass().getResource("/images/steelwall.png"));
                } else if (map[i][j].toString().charAt(0) == 'B') {
                    imageIcon = new ImageIcon(getClass().getResource("/images/brick0.png"));
                }

                labels[i][j].setIcon(imageIcon);
                labels[i][j].setHorizontalTextPosition(JLabel.CENTER);
                mapPanel.add(labels[i][j]);
            }
        }

    }

    public void fireBullet() {
        int x = player.getxValue();
        int y = player.getyValue();

        switch (player.getDirection()) {
            case 3:
                x = x - 1;
                while (x < 10 && x > -1 && y > -1 && y < 10) {
                    if ((map[x][y].toString().charAt(0) == 'B') || (map[x][y].equals("S"))) {
                        break;
                    }
                    Icon pastIcon = labels[x][y].getIcon();
                    labels[x][y].setIcon(new ImageIcon(getClass().getResource("/images/bulletW.png")));
                    try {
                        Thread.sleep(400);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    labels[x][y].setIcon(pastIcon);
                    x = x - 1;
                }
                break;
            case 2:
                y = y + 1;
                while (x < 10 && x > -1 && y > -1 && y < 10) {
                    if ((map[x][y].toString().charAt(0) == 'B') || (map[x][y].equals("S"))) {
                        break;
                    }
                    Icon pastIcon = labels[x][y].getIcon();
                    labels[x][y].setIcon(new ImageIcon(getClass().getResource("/images/bulletS.png")));
                    try {
                        Thread.sleep(400);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    labels[x][y].setIcon(pastIcon);
                    y = y + 1;
                }
                break;
            case 1:
                x = x + 1;
                while (x < 10 && x > -1 && y > -1 && y < 10) {
                    if ((map[x][y].toString().charAt(0) == 'B') || (map[x][y].equals("S"))) {
                        break;
                    }
                    Icon pastIcon = labels[x][y].getIcon();
                    labels[x][y].setIcon(new ImageIcon(getClass().getResource("/images/bulletE.png")));
                    try {
                        Thread.sleep(400);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    labels[x][y].setIcon(pastIcon);
                    x = x + 1;
                }
                break;
            case 0:
                y = y - 1;
                while (x < 10 && x > -1 && y > -1 && y < 10) {
                    if ((map[x][y].toString().charAt(0) == 'B') || (map[x][y].equals("S"))) {
                        break;
                    }
                    Icon pastIcon = labels[x][y].getIcon();
                    labels[x][y].setIcon(new ImageIcon(getClass().getResource("/images/bulletN.png")));
                    try {
                        Thread.sleep(400);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    labels[x][y].setIcon(pastIcon);
                    y = y - 1;
                }
                break;

        }
    }

    public void setPlayer(Player player) {
        this.player = player;

    }

    public void showMessage(String string, int time) {
        new Thread() {
            public void run() {
                messageText.setText(string);
                try {
                    this.sleep(time);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                messageText.setText(null);
            }
        }.start();

        if (time == 100000) {
            JOptionPane.showMessageDialog(this, "Game Over.");
            this.dispose();
        }
    }

}
